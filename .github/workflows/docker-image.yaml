name: Docker CI

on:
  pull_request:
    branches:
    - main

  push:
    branches:
    - main
  workflow_dispatch:
  
jobs:
  build-node:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present

      - name: Get date
        id: date
        run: |
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Get branch name
        id: branch
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          if [[ -z "$BRANCH_NAME" ]]; then
            BRANCH_NAME="${{ github.ref }}"
            BRANCH_NAME="${BRANCH_NAME#refs/heads/}"
          fi
          BRANCH_NAME=$(echo $BRANCH_NAME | tr / -)
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
      
      - name: Auto increment version
        id: version
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Fetch tags from the repository
            let tags = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            console.log("Tags:", tags.data.map(tag => tag.name));

            // Extract branch name and date from GitHub context
            let branch = process.env.BRANCH_NAME;
            let date = process.env.DATE;

            // Create prefix for the current branch and date
            let prefix = `${branch}-${date}-`;

            // Filter the tags for the current branch and date
            let branchTags = tags.data.filter(tag => tag.name.startsWith(prefix));
            console.log("Prefix:", prefix);
            console.log("Filtered tags:", branchTags.map(tag => tag.name));

            // If there are no tags for the current branch and date, version is 1
            // Otherwise, find the highest version number tag for the current branch and date, and increment it
            let version = branchTags.length === 0 ? 1 : branchTags.map(tag => parseInt(tag.name.split('-').pop())).reduce((max, curr) => curr > max ? curr : max, 0) + 1;

            // Return the version number
            return version;

      - name: Set release code
        if: (success() || failure())
        id: releasecode
        run: |
          VERSION=$(grep APP_VERSION= .env | cut -d '=' -f2)
          RELEASE=$BRANCH_NAME-$DATE-${{ steps.version.outputs.result }}
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "APP_ENV=prod">> $GITHUB_ENV
          echo "APP_BUILD=latest">> $GITHUB_ENV
          echo "set APP_ENV to $APP_ENV"

      - name: Setting CONTAINER_PROJECT_NAME
        run: |
          NAME=$(grep CONTAINER_PROJECT_NAME= .env | cut -d '=' -f2)
          echo "CONTAINER_PROJECT_NAME=$NAME" >> $GITHUB_ENV

      - name: Setting CONTAINER_REGISTRY_BASE
        run: |
          NAME=$(grep CONTAINER_REGISTRY_BASE= .env | cut -d '=' -f2)
          echo "CONTAINER_REGISTRY_BASE=$NAME" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker-compose -f docker-compose.deploy.yaml build --build-arg APP_ENV=$APP_ENV --build-arg APP_BUILD=$APP_BUILD

      - name: Run Docker image
        run: docker-compose -f docker-compose.deploy.yaml up -d
      - name: Pause for the container to come up
        run: sleep 10

      - name: Show docker logs
        run: docker-compose -f docker-compose.deploy.yaml logs

      - name: Add docker tags
        run: |
          images=$(docker-compose -f docker-compose.deploy.yaml images -q | xargs docker inspect --format='{{ index .RepoTags 0}}' | cut -d':' -f1 | grep $CONTAINER_PROJECT_NAME)
          for image in $images
          do
            docker tag "${image}":latest "${image}":$RELEASE
            docker tag "${image}":latest "${image}":"${APP_BUILD}"
          done
          echo 'IMAGES=$images' >> $GITHUB_ENV

      - name: Login to Container Registry
        id: containerregistry-login
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u $(cut -d'/' -f1 <<< $GITHUB_REPOSITORY) --password-stdin

      - name: Push docker images
        run: docker-compose -f docker-compose.deploy.yaml push

      - name: Push versioned containers to Container Registry
        id: version-push
        run: |
         images=$(docker-compose -f docker-compose.deploy.yaml images -q | xargs docker inspect --format='{{ index .RepoTags 0}}' | cut -d':' -f1 | grep $CONTAINER_PROJECT_NAME)
         for image in $images
         do
           docker push "${image}":$RELEASE
           docker push "${image}":"${APP_BUILD}"
         done

      - name: Chores
        run: docker-compose -f docker-compose.deploy.yaml down -v
