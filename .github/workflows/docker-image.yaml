name: Docker CI

on:
  pull_request:
    branches:
      - main

  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-node:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get date
        id: date
        run: |
          echo "DATE=$(date +'%Y%m%d%H%M%S')-$(echo $GITHUB_SHA | head -c 7)" >> $GITHUB_ENV

      - name: Get branch name
        id: branch
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          if [[ -z "$BRANCH_NAME" ]]; then
            BRANCH_NAME="${{ github.ref }}"
            BRANCH_NAME="${BRANCH_NAME#refs/heads/}"
          fi
          BRANCH_NAME=$(echo $BRANCH_NAME | tr / -)
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Set release code
        if: (success() || failure())
        id: releasecode
        run: |
          VERSION=$(grep APP_VERSION= .env | cut -d '=' -f2)
          RELEASE=$BRANCH_NAME-$DATE
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "APP_ENV=prod">> $GITHUB_ENV
          echo "APP_BUILD=latest">> $GITHUB_ENV
          echo "set APP_ENV to $APP_ENV"

      - name: Setting CONTAINER_PROJECT_NAME
        run: |
          NAME=$(grep CONTAINER_PROJECT_NAME= .env | cut -d '=' -f2)
          echo "CONTAINER_PROJECT_NAME=$NAME" >> $GITHUB_ENV

      - name: Setting CONTAINER_REGISTRY_BASE
        run: |
          NAME=$(grep CONTAINER_REGISTRY_BASE= .env | cut -d '=' -f2)
          echo "CONTAINER_REGISTRY_BASE=$NAME" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker-compose -f docker-compose.deploy.yaml build --build-arg APP_ENV=$APP_ENV --build-arg APP_BUILD=$APP_BUILD

      # - name: Build alternative
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     push: false
      #     tags: "$CONTAINER_REGISTRY_BASE/$CONTAINER_PROJECT_NAME:$APP_BUILD"
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      - name: Export test results
        run: docker-compose -f docker-compose.deploy.yaml run testresults

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: dotnet Tests            # Name of the check run which will be created
          path: testresults/*.trx    # Path to test results
          reporter: dotnet-trx        # Format of test results

      - name: Run Docker image
        run: docker-compose -f docker-compose.deploy.yaml up -d
      - name: Pause for the container to come up
        run: sleep 10

      - name: Show docker logs
        run: docker-compose -f docker-compose.deploy.yaml logs

      - name: Add docker tags
        if: github.event_name != 'pull_request'
        run: |
          images=$(docker-compose -f docker-compose.deploy.yaml images -q | xargs docker inspect --format='{{ index .RepoTags 0}}' | cut -d':' -f1 | grep $CONTAINER_PROJECT_NAME)
          for image in $images
          do
            docker tag "${image}":latest "${image}":$RELEASE
            docker tag "${image}":latest "${image}":"${APP_BUILD}"
          done
          echo 'IMAGES=$images' >> $GITHUB_ENV

      - name: Login to Container Registry
        id: containerregistry-login
        if: github.event_name != 'pull_request'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u $(cut -d'/' -f1 <<< $GITHUB_REPOSITORY) --password-stdin

      - name: Push docker images
        if: github.event_name != 'pull_request'
        run: docker-compose -f docker-compose.deploy.yaml push

      - name: Push versioned containers to Container Registry
        id: version-push
        if: github.event_name != 'pull_request'
        run: |
          images=$(docker-compose -f docker-compose.deploy.yaml images -q | xargs docker inspect --format='{{ index .RepoTags 0}}' | cut -d':' -f1 | grep $CONTAINER_PROJECT_NAME)
          for image in $images
          do
            docker push "${image}":$RELEASE
            docker push "${image}":"${APP_BUILD}"
          done

      - name: Chores
        run: docker-compose -f docker-compose.deploy.yaml down -v
